name: Minify and Publish to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  minify-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the current repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install minification tools
      - name: Install minification tools
        run: |
          npm install -g html-minifier clean-css-cli uglify-js

      # Step 4: Minify HTML, CSS, and JS files
      - name: Minify HTML, CSS, and JS files
        run: |
          find ./ -name "*.html" -exec html-minifier --collapse-whitespace --remove-comments --minify-js true --minify-css true -o {} {} \;
          find ./ -name "*.css" -exec cleancss -o {} {} \;
          find ./ -name "*.js" -exec uglifyjs -o {} -- {} \;

      # Step 5: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      # Step 6: Get commit messages from the previous commit
      - name: Get Commit Messages
        id: get-commit-messages
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

      # Step 7: Clone the target repository and prepare for deployment
      - name: Clone and Prepare Target Repository
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
          COMMIT_MSG="Updates on $TIMESTAMP: ${{ env.COMMIT_MSG }}"

          # Clone the target repository
          git clone https://x-access-token:${{ secrets.RELEASE_GITHUB_TOKEN }}@github.com/${{ secrets.RELEASE_GITHUB_REPO }} target_repo --branch publish || exit 1

          # Copy minified files into the cloned repository
          rsync -av --exclude='.git' ./ target_repo/

          cd target_repo

          git remote show origin

          if git show-ref --verify --quiet refs/heads/publish; then
            git checkout publish
          else
            git checkout -b publish
          fi

          git add .
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          git push -f origin publish
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
